"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

from mysite import local_settings

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

## Some notes about BASE_DIR in the case of HFCD:
# 
# print "__file__ == %s" % __file__
# 
## __file__ == /Users/zakf/progs/hfcd/mysite/settings.py
# 
# print "BASE_DIR == %s" % BASE_DIR
# 
## BASE_DIR == /Users/zakf/progs/hfcd
## 
## Calling os.path.dirname() discards one 'piece' of the path. The Django 
## settings.py default (which I have preserved) calls os.path.dirname() twice 
## in order to discard two 'pieces', first 'settings.py' and then 'mysite'.


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'g9^_q$6!h=($%7azm-6k2a4!k^^^o39tpldlswl7pq4@zr08ji'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mysite.hfcd',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'mysite', 'templates'),
            os.path.join(BASE_DIR, 'mysite', 'hfcd', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'database', local_settings.db_name),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'


# Using the Pickle serializer, as I have done below, is VULNERABLE to attack. 
# However, this possibility is quite remote for Tasker for multiple reasons. 
# I use Pickle instead of the default (JSON) because Pickle can store a 
# wider variety of Python objects. I am not sure whether this is necessary in 
# the case of Tasker, but it was necessary for AMPS/PTS.
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
